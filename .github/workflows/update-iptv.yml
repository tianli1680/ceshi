name: Update IPTV Playlists

on:
  schedule:
    # 每2小时运行一次
    - cron: '0 */2 * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  update-iptv:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 添加写入仓库的权限
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}  # 使用GITHUB_TOKEN进行认证
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        
    - name: Download and process M3U playlist
      run: |
        cat > process_playlist.py << 'EOF'
        import requests
        import re
        
        def process_playlist():
            # 播放链接 - 请替换为实际链接
            url = "https://iptv.livephp.fun/https://raw.githubusercontent.com/tianli1680/iptv/refs/heads/main/IPTV.m3u"
            
            try:
                # 下载M3U文件
                response = requests.get(url)
                response.raise_for_status()
                content = response.text
                
                # 初始化分类存储
                iptv_lists = {
                    "IPTV1": ["#EXTM3U"],  # 咪咕央视
                    "IPTV2": ["#EXTM3U"],  # 央视频道
                    "IPTV3": ["#EXTM3U"],  # 咪咕卫视
                    "IPTV4": ["#EXTM3U"],  # 体育频道
                    "IPTV5": ["#EXTM3U"],  # 卫视频道
                    "IPTV6": ["#EXTM3U"],  # 地方频道
                    "IPTV7": ["#EXTM3U"],  # 影视频道
                    "IPTV8": ["#EXTM3U"],  # YY轮播频道
                    "IPTV9": ["#EXTM3U"],  # 虎牙轮播频道
                    "IPTV10": ["#EXTM3U"], # 斗鱼轮播频道
                    "IPTV11": ["#EXTM3U"], # 抖音轮播频道
                    "IPTV12": ["#EXTM3U"]  # 其他频道
                }
                
                lines = content.split('\n')
                i = 0
                
                while i < len(lines):
                    line = lines[i].strip()
                    
                    # 检测频道信息行
                    if line.startswith('#EXTINF:'):
                        # 获取频道信息
                        channel_info = line
                        channel_url = lines[i+1].strip() if i+1 < len(lines) else ""
                        
                        # 提取group-title属性
                        group_match = re.search(r'group-title="([^"]*)"', channel_info)
                        group_title = group_match.group(1) if group_match else ""
                        
                        # 根据group-title分类
                        if group_title == "央视":
                            # 在央视分组中，根据频道名称进一步分类
                            if "CCTV" in channel_info and "MCP" not in channel_info:
                                # IPTV1 - 咪咕央视
                                new_info = re.sub(r'group-title="[^"]*"', 'group-title="咪咕央视"', channel_info)
                                iptv_lists["IPTV1"].append(new_info)
                                iptv_lists["IPTV1"].append(channel_url)
                            elif "MCP" in channel_info:
                                # IPTV2 - 央视频道
                                new_info = re.sub(r'group-title="[^"]*"', 'group-title="央视频道"', channel_info)
                                iptv_lists["IPTV2"].append(new_info)
                                iptv_lists["IPTV2"].append(channel_url)
                        elif group_title == "卫视":
                            # 在卫视频道中，根据是否包含MCP进一步分类
                            if "MCP" in channel_info:
                                # IPTV5 - 卫视频道
                                new_info = re.sub(r'group-title="[^"]*"', 'group-title="卫视频道"', channel_info)
                                iptv_lists["IPTV5"].append(new_info)
                                iptv_lists["IPTV5"].append(channel_url)
                            else:
                                # IPTV3 - 咪咕卫视
                                new_info = re.sub(r'group-title="[^"]*"', 'group-title="咪咕卫视"', channel_info)
                                iptv_lists["IPTV3"].append(new_info)
                                iptv_lists["IPTV3"].append(channel_url)
                        elif group_title == "体育":
                            # IPTV4 - 体育频道
                            new_info = re.sub(r'group-title="[^"]*"', 'group-title="体育频道"', channel_info)
                            iptv_lists["IPTV4"].append(new_info)
                            iptv_lists["IPTV4"].append(channel_url)
                        elif group_title == "地方":
                            # IPTV6 - 地方频道
                            new_info = re.sub(r'group-title="[^"]*"', 'group-title="地方频道"', channel_info)
                            iptv_lists["IPTV6"].append(new_info)
                            iptv_lists["IPTV6"].append(channel_url)
                        elif group_title == "影视":
                            # IPTV7 - 影视频道
                            new_info = re.sub(r'group-title="[^"]*"', 'group-title="影视频道"', channel_info)
                            iptv_lists["IPTV7"].append(new_info)
                            iptv_lists["IPTV7"].append(channel_url)
                        elif group_title == "一起看":
                            # IPTV8 - 抖鱼轮播频道
                            new_info = re.sub(r'group-title="[^"]*"', 'group-title="抖鱼轮播频道"', channel_info)
                            iptv_lists["IPTV8"].append(new_info)
                            iptv_lists["IPTV8"].append(channel_url)
                        elif group_title == "原创IP":
                            # IPTV9 - 抖音轮播频道
                            new_info = re.sub(r'group-title="[^"]*"', 'group-title="抖音轮播频道"', channel_info)
                            iptv_lists["IPTV9"].append(new_info)
                            iptv_lists["IPTV9"].append(channel_url)
                        elif group_title == "原创":
                            # IPTV10 - 虎牙轮播频道
                            new_info = re.sub(r'group-title="[^"]*"', 'group-title="虎牙轮播频道"', channel_info)
                            iptv_lists["IPTV10"].append(new_info)
                            iptv_lists["IPTV10"].append(channel_url)
                        elif group_title == "zonghe":
                            # IPTV11 - YY轮播频道
                            new_info = re.sub(r'group-title="[^"]*"', 'group-title="YY轮播频道"', channel_info)
                            iptv_lists["IPTV11"].append(new_info)
                            iptv_lists["IPTV11"].append(channel_url)
                        elif group_title == "其他":
                            # IPTV12 - 其他频道
                            new_info = re.sub(r'group-title="[^"]*"', 'group-title="其他频道"', channel_info)
                            iptv_lists["IPTV12"].append(new_info)
                            iptv_lists["IPTV12"].append(channel_url)
                        
                        i += 1  # 跳过URL行
                    
                    i += 1
                
                # 保存分类后的播放列表
                for name, lines_list in iptv_lists.items():
                    with open(f'{name}.m3u', 'w', encoding='utf-8') as f:
                        f.write('\n'.join(lines_list))
                
                # 按照指定顺序合并播放列表
                merge_order = [
                    "IPTV2",  # 央视频道
                    "IPTV5",  # 卫视频道
                    "IPTV1",  # 咪咕央视
                    "IPTV3",  # 咪咕卫视
                    "IPTV4",  # 体育频道
                    "IPTV7",  # 影视频道
                    "IPTV6",  # 地方频道
                    "IPTV12", # 其他频道
                    "IPTV8",  # 斗鱼轮播频道
                    "IPTV9",  # 抖音轮播频道
                    "IPTV10", # 虎牙轮播频道
                    "IPTV11"  # YY轮播频道
                ]
                
                merged_lines = ["#EXTM3U"]
                for key in merge_order:
                    # 跳过每个列表的第一个元素（#EXTM3U）
                    merged_lines.extend(iptv_lists[key][1:])
                
                # 保存合并的播放列表为IPTV.m3u
                with open('IPTV.m3u', 'w', encoding='utf-8') as f:
                    f.write('\n'.join(merged_lines))
                    
                print("Playlists processed successfully!")
                for name, lines_list in iptv_lists.items():
                    print(f"{name}: {len(lines_list)//2} channels")
                print(f"IPTV.m3u: {len(merged_lines)//2} channels")
                
            except Exception as e:
                print(f"Error processing playlist: {e}")
                exit(1)
        
        if __name__ == "__main__":
            process_playlist()
        EOF
        
        python process_playlist.py
        
    - name: Commit and push if changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add IPTV*.m3u IPTV.m3u
        # 检查是否有更改，有更改才提交
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-update IPTV playlists - $(date +'%Y-%m-%d %H:%M:%S')"
          git push
        fi
