name: Update IPTV Playlists

on:
  schedule:
    # 每2小时运行一次
    - cron: '0 */2 * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  update-iptv:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 添加写入仓库的权限
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}  # 使用GITHUB_TOKEN进行认证
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        
    - name: Download and process M3U playlist
      run: |
        cat > process_playlist.py << 'EOF'
        import requests
        import re
        
        def process_playlist():
            # 播放链接 - 请替换为实际链接
            url = "https://iptv.livephp.fun/https://raw.githubusercontent.com/tianli1680/iptv/refs/heads/main/IPTV.m3u"
            
            try:
                # 下载M3U文件
                response = requests.get(url)
                response.raise_for_status()
                content = response.text
                
                # 初始化分类存储
                iptv1_lines = ["#EXTM3U"]
                iptv2_lines = ["#EXTM3U"] 
                iptv3_lines = ["#EXTM3U"]
                iptv4_lines = ["#EXTM3U"]
                
                lines = content.split('\n')
                i = 0
                
                while i < len(lines):
                    line = lines[i].strip()
                    
                    # 检测频道信息行
                    if line.startswith('#EXTINF:'):
                        # 获取频道信息
                        channel_info = line
                        channel_url = lines[i+1].strip() if i+1 < len(lines) else ""
                        
                        # 提取group-title属性
                        group_match = re.search(r'group-title="([^"]*)"', channel_info)
                        if group_match:
                            group_title = group_match.group(1)
                            
                            # 根据group-title分类
                            if group_title == "央视":
                                # 在央视分组中，根据频道名称进一步分类
                                if "CCTV" in channel_info and "MCP" not in channel_info:
                                    iptv1_lines.append(channel_info)
                                    iptv1_lines.append(channel_url)
                                elif "MCP" in channel_info:
                                    iptv2_lines.append(channel_info)
                                    iptv2_lines.append(channel_url)
                            elif group_title == "卫视":
                                iptv3_lines.append(channel_info)
                                iptv3_lines.append(channel_url)
                            elif group_title == "体育":
                                iptv4_lines.append(channel_info)
                                iptv4_lines.append(channel_url)
                        
                        i += 1  # 跳过URL行
                    
                    i += 1
                
                # 保存分类后的播放列表
                with open('IPTV1.m3u', 'w', encoding='utf-8') as f:
                    f.write('\n'.join(iptv1_lines))
                
                with open('IPTV2.m3u', 'w', encoding='utf-8') as f:
                    f.write('\n'.join(iptv2_lines))
                
                with open('IPTV3.m3u', 'w', encoding='utf-8') as f:
                    f.write('\n'.join(iptv3_lines))
                
                with open('IPTV4.m3u', 'w', encoding='utf-8') as f:
                    f.write('\n'.join(iptv4_lines))
                    
                print("Playlists processed successfully!")
                print(f"IPTV1 (CCTV): {len(iptv1_lines)//2} channels")
                print(f"IPTV2 (CCTV-MCP): {len(iptv2_lines)//2} channels")
                print(f"IPTV3 (卫视): {len(iptv3_lines)//2} channels")
                print(f"IPTV4 (体育): {len(iptv4_lines)//2} channels")
                
            except Exception as e:
                print(f"Error processing playlist: {e}")
                exit(1)
        
        if __name__ == "__main__":
            process_playlist()
        EOF
        
        python process_playlist.py
        
    - name: Commit and push if changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add IPTV*.m3u
        # 检查是否有更改，有更改才提交
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-update IPTV playlists - $(date +'%Y-%m-%d %H:%M:%S')"
          git push
        fi
